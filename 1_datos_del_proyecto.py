import streamlit as st
from datetime import datetime
from utils import cargar_inspectores, cargar_normas


def formatear_fecha_para_display(fecha):
    """Convierte un objeto date a formato DD/MMM/YYYY"""
    if hasattr(fecha, 'strftime'):
        meses_abrev = ['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN',
                      'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC']
        return f"{fecha.day:02d}/{meses_abrev[fecha.month-1]}/{fecha.year}"
    return str(fecha)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Datos del Proyecto",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo personalizado restaurado
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
        border-bottom: none !important;
        box-shadow: none !important;
    }
    .stTabs {
        border-bottom: none !important;
        box-shadow: none !important;
    }
    div[data-testid="stTabs"] > div {
        border-bottom: none !important;
        box-shadow: none !important;
    }
    .stTabs [data-baseweb="tab"] {
        height: 4rem;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 4px 4px 0 0;
        gap: 1rem;
        padding-top: 10px;
        padding-bottom: 10px;
        border: none;
    }
    .stTabs [aria-selected="true"] {
        background-color: #ffffff;
        border: none;
    }
    .stTabs [data-baseweb="tab-panel"] {
        padding-top: 1rem;
    }
    .stTabs [data-baseweb="tab-highlight"] {
        background: none !important;
        height: 0px !important;
    }
    .stProgress > div > div > div {
        background-color: #4CAF50;
    }
    .module-card {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        border: 1px solid #e9ecef;
    }
    .module-card:hover {
        border-color: #4CAF50;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .stTabs div, .stTabs [data-baseweb="tab-list"], .stTabs, div[data-testid="stTabs"], div[data-testid="stTabs"] > div {
        border-bottom: none !important;
        box-shadow: none !important;
    }
    
    </style>
""", unsafe_allow_html=True)

# T√≠tulo principal con icono y descripci√≥n
st.title("üìã Datos del Proyecto")
st.markdown("Configure los detalles de su informe y seleccione los m√≥dulos necesarios para su inspecci√≥n.")

# Barra de progreso
if "bloque_1" in st.session_state:
    progress = 100
else:
    progress = 0
st.progress(progress/100)

# Crear pesta√±as para organizar la informaci√≥n
tab1, tab2 = st.tabs(["üìù Datos del Proyecto", "‚öôÔ∏è Configuraci√≥n de M√≥dulos"])

# Definir m√≥dulos disponibles
modulos_disponibles = {
    "Inspecci√≥n Visual": {
        "archivo": "2_datos_de_inspeccion_visual.py",
        "descripcion": "Inspecci√≥n visual detallada de superficies y estructuras",
        "icono": "üëÅÔ∏è",
        "titulo_sidebar": "Datos de Inspecci√≥n Visual"
    },
    "L√≠quidos Penetrantes": {
        "archivo": "3_datos_de_inspeccion_de_liquidos_penetrantes.py",
        "descripcion": "Inspecci√≥n mediante l√≠quidos penetrantes para detectar discontinuidades superficiales",
        "icono": "üíß",
        "titulo_sidebar": "Inspecci√≥n de L√≠quidos Penetrantes"
    },
    "Part√≠culas Magn√©ticas": {
        "archivo": "4_datos_de_inspeccion_de_particulas_magneticas.py",
        "descripcion": "Inspecci√≥n mediante part√≠culas magn√©ticas para detectar discontinuidades en materiales ferromagn√©ticos",
        "icono": "üß≤",
        "titulo_sidebar": "Inspecci√≥n de Part√≠culas Magn√©ticas"
    },
    "Ultrasonido": {
        "archivo": "5_datos_de_inspeccion_de_ultrasonido.py",
        "descripcion": "Inspecci√≥n mediante ondas ultras√≥nicas para detectar discontinuidades internas",
        "icono": "üì°",
        "titulo_sidebar": "Inspecci√≥n de Ultrasonido"
    }
}

# M√≥dulos seleccionados por defecto
modulos_default = ["Inspecci√≥n Visual", "L√≠quidos Penetrantes"]

with tab1:
    # Usar valores guardados si existen, si no usar por defecto
    def_valores = {
        "cliente": "Nureon",
        "proyecto": "Inspecci√≥n de Estructuras",
        "subproyecto": "Inspecci√≥n No Destructiva",
        "contratista": "Nureon S.A.S",
        "reporte_no": f"REP-{datetime.now().year}-{datetime.now().strftime('%m%d')}",
        "elaboro": "Andr√©s L√≥pez",
        "norma_global": "AWS D1.1 2020",
        "fecha": datetime.now().date(),
        "lugar": "Bogot√°, Colombia",
        "firma_1": "Firma del inspector que realiza la inspecci√≥n y el informe",
        "firma_2": "Revisa el informe",
        "firma_3": "Cliente",
        "modulos_seleccionados": modulos_default
    }

    if "bloque_1" in st.session_state:
        valores = st.session_state.bloque_1.copy()
        if "firmas" in valores:
            valores["firma_1"] = valores["firmas"].get("firma_1", def_valores["firma_1"])
            valores["firma_2"] = valores["firmas"].get("firma_2", def_valores["firma_2"])
            valores["firma_3"] = valores["firmas"].get("firma_3", def_valores["firma_3"])
    else:
        valores = def_valores.copy()
        # Inicializar la configuraci√≥n de p√°ginas
        st.session_state.pages_config = {
            "modulos": [
                st.Page(modulos_disponibles[modulo]["archivo"], title=modulos_disponibles[modulo]["titulo_sidebar"])
                for modulo in modulos_default
            ]
        }

    # Crear columnas para los campos del formulario
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìå Informaci√≥n General")
        with st.container():
            cliente = st.text_input("Cliente", valores["cliente"], help="Nombre del cliente o empresa")
            proyecto = st.text_input("Proyecto", valores["proyecto"], help="Nombre del proyecto")
            subproyecto = st.text_input("Subproyecto", valores["subproyecto"], help="Nombre del subproyecto o √°rea espec√≠fica")
            contratista = st.text_input("Contratista", valores["contratista"], help="Nombre de la empresa contratista")
            reporte_no = st.text_input("Reporte N¬∞", valores["reporte_no"], help="N√∫mero de identificaci√≥n del reporte")

    with col2:
        st.subheader("üìã Detalles del Informe")
        with st.container():
            # Cargar lista de inspectores desde CSV
            inspectores = cargar_inspectores()
            elaboro = st.selectbox("Elabor√≥", options=inspectores, index=inspectores.index(valores["elaboro"]) if valores["elaboro"] in inspectores else 0, help="Nombre del inspector que elabora el informe")
            # Cargar lista de normas desde CSV
            normas = cargar_normas()
            norma_global = st.selectbox("Norma global", options=normas, index=normas.index(valores["norma_global"]) if valores["norma_global"] in normas else 0, help="Norma de referencia para la inspecci√≥n")
            st.session_state["norma_global"] = norma_global
            fecha = st.date_input("Fecha", value=valores["fecha"] if hasattr(valores["fecha"], 'strftime') else datetime.now().date(), help="Fecha de la inspecci√≥n")
            lugar = st.text_input("Lugar", valores["lugar"], help="Ubicaci√≥n donde se realiza la inspecci√≥n")

    # Secci√≥n de firmas en un contenedor expandible
    with st.expander("üë• Firmas", expanded=True):
        st.markdown("Configure las firmas necesarias para el informe")
        col1, col2, col3 = st.columns(3)
        with col1:
            firma_1 = st.text_input("Firma 1", valores["firma_1"], help="Inspector que realiza la inspecci√≥n")
        with col2:
            firma_2 = st.text_input("Firma 2", valores["firma_2"], help="Revisor del informe")
        with col3:
            firma_3 = st.text_input("Firma 3", valores["firma_3"], help="Cliente o representante")

with tab2:
    st.subheader("üéØ Selecci√≥n de M√≥dulos")
    st.markdown("Seleccione los m√≥dulos que desea incluir en el informe:")

    # Crear columnas para los m√≥dulos
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã M√≥dulos Disponibles")
        modulos_seleccionados = []
        
        for nombre, info in modulos_disponibles.items():
            with st.container():
                st.markdown(f"""
                <div class="module-card">
                    <h4>{info['icono']} {nombre}</h4>
                    <p>{info['descripcion']}</p>
                </div>
                """, unsafe_allow_html=True)
                if st.checkbox(f"Incluir {nombre}", 
                             value=nombre in valores.get("modulos_seleccionados", modulos_default),
                             key=f"modulo_{nombre}"):
                    modulos_seleccionados.append(nombre)

    with col2:
        st.markdown("### ‚ÑπÔ∏è Informaci√≥n")
        st.info("""
        **Instrucciones:**
        1. Seleccione los m√≥dulos que necesita para su inspecci√≥n
        2. Cada m√≥dulo contiene formularios espec√≠ficos
        3. Los m√≥dulos seleccionados aparecer√°n en la barra lateral
        4. Puede modificar su selecci√≥n en cualquier momento
        """)
        
        if modulos_seleccionados:
            st.success(f"‚úÖ {len(modulos_seleccionados)} m√≥dulos seleccionados")
        else:
            st.warning("‚ö†Ô∏è No hay m√≥dulos seleccionados")

# Bot√≥n de guardar en la parte inferior
col1, col2, col3 = st.columns([1,2,1])
with col2:
    if st.button("üíæ Guardar Configuraci√≥n", type="primary", use_container_width=True):
        if not modulos_seleccionados:
            st.error("‚ö†Ô∏è Debe seleccionar al menos un m√≥dulo")
        else:
            # Guardar datos del proyecto en formato para reporte
            st.session_state.datos_proyecto = {
                "numero_informe": reporte_no,
                "fecha": formatear_fecha_para_display(fecha) if hasattr(fecha, 'strftime') else str(fecha),
                "cliente": cliente,
                "proyecto": proyecto,
                "ubicacion": lugar,
                "inspector": elaboro,
                "contratista": contratista,
                "subproyecto": subproyecto,
                "norma_global": norma_global,
                "firmas": {
                    "firma_1": firma_1,
                    "firma_2": firma_2,
                    "firma_3": firma_3
                }
            }
            
            # Tambi√©n guardar en bloque_1 para compatibilidad
            st.session_state.bloque_1 = {
                "cliente": cliente,
                "proyecto": proyecto,
                "subproyecto": subproyecto,
                "contratista": contratista,
                "reporte_no": reporte_no,
                "elaboro": elaboro,
                "norma_global": norma_global,
                "fecha": fecha,
                "lugar": lugar,
                "firmas": {
                    "firma_1": firma_1,
                    "firma_2": firma_2,
                    "firma_3": firma_3
                },
                "modulos_seleccionados": modulos_seleccionados
            }
            
            # Actualizar la configuraci√≥n de p√°ginas en session_state
            if "pages_config" not in st.session_state:
                st.session_state.pages_config = {}
            
            # Actualizar la configuraci√≥n de m√≥dulos
            st.session_state.pages_config["modulos"] = [
                st.Page(modulos_disponibles[modulo]["archivo"], title=modulos_disponibles[modulo]["titulo_sidebar"])
                for modulo in modulos_seleccionados
            ]
            
            st.success("‚úÖ Configuraci√≥n guardada correctamente")
            st.balloons()
            st.rerun() 